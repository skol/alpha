1. Цель технического задания
Тестовое задание – дополнительный способ для нас убедиться в вашей квалификации и понять, какого рода задачи вы выполняете эффективнее всего.
Расчётное время на выполнение тестового задания: 2-3 дня. Если вы читаете данное сообщение, то Вы уже приступили к выполнению задания.
У текущего тестового задания есть только общее описание требований, конкретные детали реализации остаются на усмотрение разработчика. 
Стек, который Вам необходимо использовать: FastAPI, PostgreSQL, Socketio, JWToken

2. Задача
- Разработать backend для чата с пользователями.
! + новый пользователь регистрируется по номеру телефона
! + любой пользователь должен пройти авторизацию
! + проверка наличия авторизации выполняется с помощью валидного JWT токена.
- - после авторизации пользователю должны быть доступны следующие возможности:
! + - простое редактирование профиля с изменением информации о пользователе и аватарки.
! + - - аватарку принимать в base64, сохранять её в размерах: 50х50, 100х100, 400х400, и оригинальном.
? + - получить список чатов для текущего пользователя
? + - установить один из чатов активным
? + - создать чат
? + - к чату присоединить участника и сделать чат групповым, при необходимости
- - - удалить групповой чат (создатель)
- - - для каждого группового чата должно быть доступно:
- - - - переименовать групповой чат (индивидуально, для каждого участника группы)
- - - - добавить участника (создатель, участники)
- - - - удалить участника (создатель)
- - - - покинуть чат (все участники, кроме создателя, создатель может только удалить групповой чат)
- - - общение в чате
? + - - получить список сообщений в активном чате
? + - - отправить сообщение в активный чат (В публичный или закрытый чат сообщения доставляются абсолютно одинаково. Нюансы начинаются в отображении, но, для api это не важно)
- - дополнительно:
! - - должны быть реализованы закреплённые чаты
! - - типы сообщений
! - - лайки для каждого из сообщений

- Реализовать функционал чатов с использованием Socketio.
- - изменился список чатов или количество сообщений в них (event)
- - изменилось количество сообщений в активном чате (event)
! - получить список чатов с метаинформацией о типе чата, количестве сообщений в нем, дате последнего обновления (action)
! - начать новый групповой чат (action)
! - начать новый приватный чат (action)
? - выбрать другой чат активным (action)
? - получить список сообщений из активного чата (action)
? - отправить сообщение в активный чат (action)

Сущности необходимо придумать и реализовать самим, на основе текущего задания. Для примера можете ориентироваться на популярные мессенджеры.
Также необходимо реализовать:
- организовать тестирование написанного кода;
- обеспечить автоматическую сборку/тестирование с помощью GitHub CI;
- подготовить docker-compose для запуска всех сервисов проекта одной командой;
- написать конфигурационные файлы (deployment, ingress, …) для запуска проекта в kubernetes и описать как их применить к работающему кластеру;
- сделать так, чтобы по адресу /docs/ открывалась страница со Swagger UI и в нём отображалось описание разработанного API. Пример: https://petstore.swagger.io;
- обеспечить подробное логирование на всех этапах обработки запросов, чтобы при эксплуатации была возможность найти в логах всю информацию.

3. Результат выполнения задания
Результатом задания должен быть работоспособный swagger site со всем вышеупомянутым функционалом. Проект предоставляется в виде ссылки на git-проект.
